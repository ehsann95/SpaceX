{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","Fragment","components_MissionKey","react_apollo_esm","query","error","loading","data","style","display","justifyContent","alignItems","class","width","height","role","console","log","launches","map","components_LaunchItem","key","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","text-sucess","client","ApolloClient","uri","App","src","logo","alt","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8e0621e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.be955c33.png\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Link } from 'react-router-dom'\n\nconst LaunchItem = ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) => {\n  // console.log(mission_name, flight_number);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launch_success,\n                \"text-danger\": !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"DD-MM-YYYY HH:mm\">{launch_date_local}</Moment>{\" \"}\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default LaunchItem;\n","import React from \"react\";\n\nconst MissionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n};\n\nexport default MissionKey;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  return (\n    <>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      <MissionKey />\n      <Query query={LAUNCHES_QUERY}>\n        {({ error, loading, data }) => {\n          if (loading)\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  \n                }}\n              >\n                <div\n                  class=\"spinner-grow text-info\"\n                  style={{ width: \"8rem\", height: \"8rem\" }}\n                  role=\"status\"\n                >\n                  <span class=\"sr-only\">Loading...</span>\n                </div>\n              </div>\n            );\n          if (error) console.log(error);\n\n          return (\n            <>\n              {data.launches.map(launch => (\n                <LaunchItem key={launch.flight_number} launch={launch} />\n              ))}\n            </>\n          );\n        }}\n      </Query>\n    </>\n  );\n};\n\nexport default Launches;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst Launch = props => {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n  return (\n    <>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          if (loading)\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                <div\n                  class=\"spinner-grow text-info my-3\"\n                  style={{ width: \"6rem\", height: \"6rem\" }}\n                  role=\"status\"\n                >\n                  <span class=\"sr-only\">Loading...</span>\n                </div>\n              </div>\n            );\n          if (error) console.log(error);\n\n          const {\n            flight_number,\n            mission_name,\n            launch_year,\n            launch_date_local,\n            launch_success,\n            rocket: { rocket_id, rocket_name, rocket_type }\n          } = data.launch;\n          console.log(data);\n          return (\n            <div>\n              <h1 className=\"display-4 my-3\">\n                <span className=\"text-light\">Mission: </span> {mission_name}\n              </h1>\n              <h4 className=\"mb-3\">Launch Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                  Flight Number: {flight_number}\n                </li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">\n                  Launch Success:{\" \"}\n                  <span\n                    className={classNames({\n                      \"text-sucess\": launch_success,\n                      \"text-danger\": !launch_success\n                    })}\n                  >\n                    {launch_success ? \"Yes\" : \"No\"}\n                  </span>\n                </li>\n                <li className=\"list-group-item\">\n                  Launch Date:{\" \"}\n                  <Moment format=\"DD-MM-YYYY HH-mm\">{launch_date_local}</Moment>\n                </li>\n              </ul>\n\n              <h4 className=\"mb-3\">Rocket Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n              </ul>\n              <hr />\n              <Link to=\"/\" className=\"btn btn-secondary \">\n                Back\n              </Link>\n            </div>\n          );\n        }}\n      </Query>\n    </>\n  );\n};\nexport default Launch;\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport \"./App.css\";\nimport logo from \"./logo.png\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} /> \n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}